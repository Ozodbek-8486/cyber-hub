components/kali-header.tsx:
\`\`\`typescript
import Image from "next/image"

export default function KaliHeader() {
  return (
    <header className="relative border-b border-emerald-900/40 bg-gradient-to-b from-[#07120F] via-[#040A08] to-black">
      <div className="container mx-auto grid grid-cols-1 items-center gap-10 px-4 py-10 md:grid-cols-2 md:py-16">
        <div>
          <div className="inline-flex items-center gap-2 rounded-full border border-emerald-800/60 bg-[#0E221D] px-3 py-1 text-xs text-emerald-300">
            Qora + to&apos;q yashil, Kali uslubi
          </div>
          <h1 className="mt-4 text-3xl font-semibold tracking-tight text-emerald-100 md:text-5xl">
            Statik kod bo&apos;limlari — faqat ko&apos;rish va nusxalash
          </h1>
          <p className="mt-3 max-w-xl text-sm text-emerald-200/85 md:text-base">
            Pastdagi 30 ta bo&apos;limga siz kodlarni kiritib qo&apos;yasiz. Foydalanuvchilar ularni o&apos;zgartira
            olmaydi — faqat ko&apos;rish va <span className="text-emerald-300">Nusxalash</span>.
          </p>
        </div>

        {/* Larger, fully-visible rotating globe (transparent PNG) */}
        <div className="relative mx-auto aspect-square w-64 sm:w-80 md:w-[32rem] lg:w-[36rem]">
          <div
            className="absolute inset-0 will-change-transform animate-[spin_26s_linear_infinite] pointer-events-none"
            aria-hidden="true"
          >
            <Image
              src="/images/globe-dots.png"
              alt="Aylanuvchi nuqtali globus — qora fonda oq nuqtalar bilan"
              fill
              priority
              sizes="(max-width: 640px) 16rem, (max-width: 768px) 20rem, (max-width: 1024px) 32rem, 36rem"
              className="object-contain"
            />
          </div>
        </div>
      </div>
    </header>
  )
}
\`\`\`

components/sections/draggable-code.tsx:
\`\`\`typescript
"use client"

import type React from "react"
import { useRef, useState } from "react"
import { cn } from "@/lib/utils"

type Props = {
  code: string
  className?: string
}

export default function DraggableCode({ code, className }: Props) {
  const ref = useRef<HTMLPreElement | null>(null)
  const [dragging, setDragging] = useState(false)
  const pos = useRef<{ x: number; y: number; sl: number; st: number }>({ x: 0, y: 0, sl: 0, st: 0 })

  const onPointerDown = (e: React.PointerEvent) => {
    const el = ref.current
    if (!el) return
    setDragging(true)
    pos.current = { x: e.clientX, y: e.clientY, sl: el.scrollLeft, st: el.scrollTop }
    el.setPointerCapture(e.pointerId)
    el.style.userSelect = "none"
    el.style.cursor = "grabbing"
  }

  const onPointerMove = (e: React.PointerEvent) => {
    const el = ref.current
    if (!el || !dragging) return
    const dx = e.clientX - pos.current.x
    const dy = e.clientY - pos.current.y
    el.scrollLeft = pos.current.sl - dx
    el.scrollTop = pos.current.st - dy
  }

  const endDrag = (e: React.PointerEvent) => {
    const el = ref.current
    if (!el) return
    setDragging(false)
    try {
      el.releasePointerCapture(e.pointerId)
    } catch {}
    el.style.userSelect = ""
    el.style.cursor = ""
  }

  return (
    <pre
      ref={ref}
      onPointerDown={onPointerDown}
      onPointerMove={onPointerMove}
      onPointerUp={endDrag}
      onPointerCancel={endDrag}
      className={cn(
        "max-h-[260px] sm:max-h-[300px] md:max-h-[360px] overflow-auto rounded-md",
        "border border-emerald-800/60 bg-[#0B1412] p-3 text-[13px] sm:text-sm leading-relaxed",
        "text-emerald-100 whitespace-pre cursor-grab select-text",
        className
      )}
      style={{
        WebkitOverflowScrolling: "touch",
        touchAction: "pan-x pan-y",
        overscrollBehavior: "contain",
      }}
      aria-label="Kod ko‘rish sohasi"
    >
      <code>{code}</code>
    </pre>
  )
}
\`\`\`

components/sections/section-card.tsx:
\`\`\`typescript
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import DraggableCode from "./draggable-code"

type Props = {
  id: string
  title: string
  code: string
}

export default function SectionCard({ id, title, code }: Props) {
  const [copied, setCopied] = useState(false)

  const handleCopy = async () => {
    await navigator.clipboard.writeText(code)
    setCopied(true)
    setTimeout(() => setCopied(false), 1200)
  }

  return (
    <Card id={id} className="scroll-mt-28 md:scroll-mt-32 border-emerald-800/60 bg-[#081512]/70 backdrop-blur">
      <CardHeader>
        <CardTitle className="text-emerald-100">{title}</CardTitle>
        <CardDescription className="text-emerald-200/75">
          Faqat ko&apos;rish mumkin. O&apos;zgartirish cheklangan.
        </CardDescription>
      </CardHeader>
      <CardContent className="grid gap-3">
        <DraggableCode code={code} />
        <div className="flex items-center gap-2">
          <Button
            onClick={handleCopy}
            variant="outline"
            className="border-emerald-800/60 bg-[#0A1512] text-emerald-100 hover:bg-[#103329]"
          >
            {copied ? "Nusxalandi!" : "Koddan nusxa olish"}
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
\`\`\`

components/sections/sections-index.tsx:
\`\`\`typescript
import Link from "next/link"

const LINKS = Array.from({ length: 30 }, (_, i) => ({ label: `${i + 1}`, href: `#section-${i + 1}` }))

export default function SectionsIndex() {
  return (
    <nav
      id="top-index"
      aria-label="Bo‘limlar indeksi"
      className="sticky top-16 z-40 -mx-4 border-y border-emerald-900/40 bg-black/70 px-2 sm:px-4 py-2 sm:py-3 backdrop-blur supports-[backdrop-filter]:bg-black/50"
    >
      <div className="flex w-full items-center gap-1.5 sm:gap-2 overflow-x-auto">
        <span className="text-[11px] sm:text-xs text-emerald-300/80 shrink-0 pl-2 sm:pl-0">Bo‘limlar:</span>
        {LINKS.map((l) => (
          <Link
            key={l.href}
            href={l.href}
            className="rounded-md border border-emerald-900/60 bg-[#06120F] px-2 py-1 text-[11px] sm:text-xs text-emerald-200 hover:bg-[#0A1D18]"
          >
            {l.label}
          </Link>
        ))}
      </div>
    </nav>
  )
}
\`\`\`

components/news-ticker.tsx:
\`\`\`typescript
import { Megaphone } from 'lucide-react'

const items = [
  "Yangi yamoqlar e’lon qilindi",
  "CVE ro‘yxatlariga yangilanishlar",
  "Tarmoq xavfsizligi bo‘yicha blog posti",
  "Kriptografiya yangiliklari",
  "Linux yadrosi bo‘yicha e’lon",
  "OWASP yo‘riqnomalari yangilandi",
]

export default function NewsTicker() {
  return (
    <div className="w-full border-b border-emerald-800/50 bg-[#0A1512]">
      <div className="container mx-auto px-4">
        <div className="flex items-center gap-3 py-2">
          <span className="inline-flex h-6 w-6 items-center justify-center rounded-full bg-emerald-600/25 text-emerald-300 ring-1 ring-emerald-700/50">
            <Megaphone className="h-3.5 w-3.5" aria-hidden="true" />
          </span>
          <div className="flex-1 overflow-x-auto">
            <div className="flex items-center gap-3 whitespace-nowrap text-xs sm:text-sm text-emerald-100">
              {items.map((t, i) => (
                <span
                  key={i}
                  className="rounded-full border border-emerald-800/60 bg-[#0F241F] px-3 py-1 text-emerald-200"
                >
                  {t}
                </span>
              ))}
            </div>
          </div>
          <div className="hidden sm:block text-xs text-emerald-300/80">Yangiliklar tasmasi</div>
        </div>
      </div>
    </div>
  )
}
\`\`\`
